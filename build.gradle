plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
	id 'net.neoforged.gradle.userdev' version '7.0.165'
	id 'com.diffplug.spotless' version "7.0.0.BETA4"
}

version = minecraft_version + "-v" + mod_version + "-" + new Date().format("dd.MM.yyyy")
group = mod_group

base {
	archivesName = "DragonSurvival"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
	configureEach {
		systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		systemProperty 'neoforge.logging.markers', 'REGISTRIES'
		systemProperty 'neoforge.logging.console.level', 'debug'

		modSource project.sourceSets.main
	}

	client {
		arguments '--username', 'Dev####'
	}

	client_static_username { // To be able to start a second client in parallel
		runType 'client'
		arguments '--username', 'Dev'
	}

	server {
		arguments '--nogui'
	}

	gameTestServer {}

	data {
		arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}

	junit {}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		name = 'GeckoLib'
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroup("software.bernie.geckolib")
		}
	}
	maven { /* JEI */ url "https://maven.blamejared.com" }
	maven { /* Curios */ url "https://maven.theillusivec4.top/" }
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven { url "https://api.modrinth.com/maven" }
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"

	// Dependencies
	implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"

	// Compatibility
	compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
	runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

	// Test
//	implementation "curse.maven:jade-324717:5846105" // 15.8.2
//	implementation "maven.modrinth:sodium:mc1.21-0.6.0-beta.2-neoforge"
//	implementation "curse.maven:irisshaders-455508:5765375" // 1.8 Beta 5
	implementation "curse.maven:apothic-attributes-898963:5751458" // 2.4.0
	implementation "curse.maven:placebo-283644:5869769" // 9.5.4

	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
			minecraft_version           : minecraft_version,
			minecraft_version_range     : minecraft_version_range,
			neo_version                 : neo_version,
			neo_version_range           : neo_version_range,
			loader_version_range        : loader_version_range,
			geckolib_version_range      : geckolib_version_range,
			mod_id                      : mod_id,
			mod_name                    : mod_name,
			mod_license                 : mod_license,
			mod_version                 : mod_version,
			mod_authors                 : mod_authors,
			pack_format_number          : pack_format_number,
	]

	duplicatesStrategy = DuplicatesStrategy.WARN

	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties + [project: project]
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}

minecraft {
	accessTransformers {
		file('src/main/resources/META-INF/accesstransformer.cfg')
	}
}

// Enable JUnit in Gradle:
test {
	useJUnitPlatform()
}

// We use spotless for code formatting.
spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}

	java {
		target 'src/*/java/**/*.java'

		// note: '' is for all other imports \\# is a prefix for static
		// There's an empty line between all groups; use | to join without empty lines
		importOrder(
				'',
				'java|javax',
				'\\#'
		)
		removeUnusedImports()

		// fixes formatting of type annotations
		formatAnnotations()

		indentWithSpaces()
	}
}
